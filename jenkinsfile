node {
    try {
        currentBuild.result = "SUCCESS"
        env.IMAGE_TAG = "${env.BUILD_NUMBER}"
        env.NAMESPACE = "default"
        stage('Git') {
            checkout([$class: 'GitSCM', branches: [[name: 'master']],
                 userRemoteConfigs: [[credentialsId: 'example3', url: 'https://gitee.com/my_lot/book_api.git']]])
        }
        stage('Build docker image') {
            echo "run Build start"
            dockerImage = "fast_tmp:${env.BUILD_NUMBER}"
            docker.withRegistry("registry.cn-zhangjiakou.aliyuncs.com") {
                docker.withServer(env.BUILD_SERVER) {
                    def customImage = docker.build("${dockerImage}")
                    echo "run push start"
                    echo env.IMAGE_REGISTRY
                    customImage.push()
                    echo "run push end"
                }
            }
            echo "run Build end"
        }
        stage('Deploy') {
            dockerImage = "bookimage:${env.BUILD_NUMBER}"
            docker.withServer(env.BUILD_SERVER) {
                try {
                    sh "docker rm -f web_container"
                } catch(e) {
                    echo e
                }
                echo "run image start"
                docker.image(dockerImage).run("-p 5000:5000 --name web_container")
                echo "run image end"
            }
        }

        stage('clean image') {
            build_number = Integer.parseInt(env.BUILD_NUMBER) - 1
            docker.withServer(env.BUILD_SERVER) {
                try {
                    sh "docker image rm 192.168.93.128:5001/bookimage:${build_number}"
                    sh "docker image rm bookimage:${build_number}"
                } catch (e) {
                    echo "clean image error"
                }
            }
        }
        stage('notifaction') {
            echo "success"
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        echo "failed"
        throw err
    }
}